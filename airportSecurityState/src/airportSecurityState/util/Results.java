package airportSecurityState.util;

import java.util.ArrayList;
import java.util.Arrays;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class Results implements FileDisplayInterface, StdoutDisplayInterface{
    private ArrayList<int[]> results;
    private PrintWriter pWrite;

   /**
    * Constructor for Results class. Accepts string as parameter,
    * which indicates where the output file is to write to. Catches
    * IOException if generated by FileWriter. Also initializes data
    * structure used to store result strings
    * 
    * @return - no return value
    */
    public Results(String outFile)
    {	
	MyLogger.writeMessage("Results Constructor Called", MyLogger.DebugLevel.CONSTRUCTOR);
        results = new ArrayList<int[]>();
        try
	{
	    pWrite = new PrintWriter(new BufferedWriter(new FileWriter(outFile)));
	}
	catch(IOException e)
	{
	    e.printStackTrace();
	}
    }

   /**
    * Implements writeToStdout from StdoutDisplayInterface
    *
    * @return void - no return value
    */
    public void writeToStdout(String s)
    {
	System.out.println(s);
    }

   /**
    * Implements writeToFile for FileDisplayInterface
    *
    * @return void - no return value
    */
    public void writeToFile(String s)
    {
	pWrite.write(s+'\n', 0, s.length()+1);
    }

   /**
    * Stores result string in Results ArrayList
    *
    * @return void - no return type
    */
    public void storeNewResult(int[] ops)
    {
	MyLogger.writeMessage("Result Added: " + Arrays.toString(ops), MyLogger.DebugLevel.ADD_RESULT);
	results.add(ops);
    }

   /**
    * Prints all results in results
    *
    * @return void - no return type
    */
    public void printResults()
    {
	int i, j;
	for(i=0; i<results.size(); i++)
	{
	    String arrayStr = "";
	    for(j=0; j < results.get(i).length; j++)
	    {
		if(j > 0)
		{
		    arrayStr += ", ";
		}
		arrayStr += Integer.toString(results.get(i)[j]);
	    }
	    writeToStdout(arrayStr);
	    writeToFile(arrayStr);
	}
    }

   /**
    * Closes PrintWriter to empty buffer and write to file
    *
    * @return void - no return type
    */
    public void close()
    {
	pWrite.close();
    }
}
